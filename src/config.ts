import { Emojis, LANGUAGES, rootFolder } from '#utils/constants';
import { minutes } from '#utils/function';
import { Language } from '@prisma/client';
import { BucketScope, ClientLoggerOptions, container, LogLevel } from '@sapphire/framework';
import type { InternationalizationContext, InternationalizationOptions } from '@sapphire/plugin-i18next';
import type { LoggerFormatOptions } from '@sapphire/plugin-logger';
import { envParseArray, envParseString, setup } from '@skyra/env-utilities';
import { blue, green, red, yellow } from 'colorette';
import type { ActivitiesOptions, ClientOptions } from 'discord.js';
import { Options } from 'discord.js';
import type { InterpolationOptions } from 'i18next';
import { join } from 'node:path';

setup(join(rootFolder, 'src', '.env'));

export const ALLOWED_SERVERS = ['951101886684082176', '945033113673801799'];
export const CLIENT_OWNERS = envParseArray('CLIENT_OWNERS');

/* const STAT_CORD_OPTIONS: StatcordOptions = {
	client_id: envParseString('CLIENT_ID'),
	key: envParseString('STATCORD_TOKEN'),
	autopost: false
}; */

const loggerOptions: LoggerFormatOptions = {
	info: {
		timestamp: {
			pattern: 'HH:mm:ss',
			color: blue
		},
		infix: blue('INFO ã€¢ ')
	},
	debug: {
		timestamp: {
			pattern: 'HH:mm:ss',
			color: green
		},
		infix: green('DEBUG ã€¢ ')
	},
	warn: {
		timestamp: {
			pattern: 'HH:mm:ss',
			color: yellow
		},
		infix: yellow('WARN ã€¢ ')
	},
	error: {
		timestamp: {
			pattern: 'HH:mm:ss',
			color: red
		},
		infix: red('ERROR ã€¢ ')
	}
};

function parseLoggerOptions(): ClientLoggerOptions {
	return {
		level: envParseString('NODE_ENV') === 'production' ? LogLevel.Info : LogLevel.Debug,
		format: loggerOptions
	};
}

function parseInternationalizationInterpolation(): InterpolationOptions {
	return {
		defaultVariables: {
			wrong: Emojis.wrong,
			right: Emojis.right,
			excl: Emojis.excl,
			netual: Emojis.netual,
			setting: Emojis.setting,
			ninoheart: Emojis.ninoheart,
			ninozzz: Emojis.ninozzz
		},
		escapeValue: false
	};
}

function parseInternationalizationOptions(): InternationalizationOptions {
	return {
		defaultMissingKey: 'default',
		defaultNS: 'globals',
		fetchLanguage: async (context: InternationalizationContext) => {
			if (!context.guild) return LANGUAGES[Language.EN];

			const data = await container.prisma.guild
				.findUniqueOrThrow({
					where: {
						id: BigInt(context.guild.id)
					}
				})
				.catch(() =>
					container.prisma.guild.create({
						data: {
							id: BigInt(context.guild!.id),
							lang: Language.ES
						}
					})
				);

			return LANGUAGES[data.lang];
		},
		i18next: (_: string[], languages: string[]) => ({
			supportedLngs: languages,
			preload: languages,
			returnObjects: true,
			returnEmptyString: false,
			returnNull: false,
			load: 'all',
			lng: 'en-US',
			fallbackLng: 'en-US',
			defaultNS: 'globals',
			overloadTranslationOptionHandler: (args) => ({ defaultValue: args[1] ?? 'globals:default' }),
			initImmediate: false,
			interpolation: parseInternationalizationInterpolation()
		}),
		hmr: {
			enabled: true
		}
	};
}

function parsePresenceActivities(): ActivitiesOptions[] {
	return [
		{
			name: 'with logs ðŸ“‹',
			type: 'PLAYING'
		}
	];
}

export const CLIENT_OPTIONS: ClientOptions = {
	regexPrefix: /^(hey +)?Nino[,! ]/i,
	allowedMentions: { users: [], roles: [] },
	subcommandsAdvanced: { nameCommandsAutogenerated: true },
	caseInsensitiveCommands: true,
	caseInsensitivePrefixes: true,
	loadDefaultErrorListeners: false,
	loadMessageCommandListeners: true,
	preventFailedToFetchLogForGuilds: [
		'876339668956893216',
		'877560701416259625',
		'880099532417941524',
		'925909747994071111',
		'844856727517003818',
		'726505646073315408',
		'806611727684599838'
	],
	restTimeOffset: 0,
	shards: 'auto',
	partials: ['MESSAGE', 'CHANNEL', 'USER', 'GUILD_MEMBER'],
	makeCache: Options.cacheEverything(),
	sweepers: {
		...Options.defaultSweeperSettings,
		messages: {
			interval: minutes.toSeconds(3),
			lifetime: minutes.toSeconds(15)
		}
	},
	intents: [
		'GUILDS',
		'GUILD_MEMBERS',
		'GUILD_BANS',
		'GUILD_EMOJIS_AND_STICKERS',
		'GUILD_VOICE_STATES',
		'GUILD_MESSAGES',
		'GUILD_MESSAGE_REACTIONS'
	],
	logger: parseLoggerOptions(),
	presence: { activities: parsePresenceActivities() },
	// statcord: STAT_CORD_OPTIONS,
	i18n: parseInternationalizationOptions(),
	defaultCooldown: {
		delay: 10_000, // 10s
		filteredUsers: CLIENT_OWNERS, // bot owners
		limit: 2, // Limit 2 commands for second
		scope: BucketScope.User // Scope User
	},
	hmr: {
		enabled: envParseString('NODE_ENV') === 'development'
	}
};
